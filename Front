import React, { useState, useEffect } from 'react';
import { Heart, Calendar, Users, Bell, MapPin, Phone, Mail, Award, TrendingUp, Clock } from 'lucide-react';

const ThalassemiaCareApp = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [userType, setUserType] = useState('patient'); // 'patient' or 'donor'
  const [patientData, setPatientData] = useState({
    name: 'Priya Sharma',
    bloodType: 'B+',
    nextTransfusion: '2025-08-15',
    location: 'Chennai',
    totalTransfusions: 45
  });
  
  const [donorData, setDonorData] = useState({
    name: 'Raj Kumar',
    bloodType: 'B+',
    lastDonation: '2025-06-20',
    totalDonations: 12,
    location: 'Chennai',
    streakDays: 240,
    badges: ['Regular Donor', 'Life Saver', 'Community Hero']
  });

  const [bloodRequests, setBloodRequests] = useState([
    { id: 1, patientName: 'Anita M.', bloodType: 'B+', unitsNeeded: 2, urgency: 'high', requiredBy: '2025-08-10', location: 'Chennai' },
    { id: 2, patientName: 'Kumar S.', bloodType: 'O+', unitsNeeded: 3, urgency: 'medium', requiredBy: '2025-08-12', location: 'Chennai' },
    { id: 3, patientName: 'Deepa R.', bloodType: 'B+', unitsNeeded: 1, urgency: 'low', requiredBy: '2025-08-18', location: 'Chennai' }
  ]);

  const [predictedDonors, setPredictedDonors] = useState([
    { id: 1, name: 'Arun V.', availabilityScore: 0.85, lastDonation: '2025-06-15', donationCount: 8 },
    { id: 2, name: 'Meera P.', availabilityScore: 0.72, lastDonation: '2025-07-01', donationCount: 15 },
    { id: 3, name: 'Sanjay K.', availabilityScore: 0.68, lastDonation: '2025-05-28', donationCount: 6 }
  ]);

  const PatientDashboard = () => (
    <div className="space-y-6">
      {/* Header Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-gradient-to-r from-red-500 to-red-600 rounded-xl p-6 text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-red-100">Next Transfusion</p>
              <p className="text-2xl font-bold">{new Date(patientData.nextTransfusion).toLocaleDateString()}</p>
            </div>
            <Calendar className="h-8 w-8 text-red-200" />
          </div>
        </div>
        
        <div className="bg-gradient-to-r from-blue-500 to-blue-600 rounded-xl p-6 text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-blue-100">Total Transfusions</p>
              <p className="text-2xl font-bold">{patientData.totalTransfusions}</p>
            </div>
            <Heart className="h-8 w-8 text-blue-200" />
          </div>
        </div>
        
        <div className="bg-gradient-to-r from-green-500 to-green-600 rounded-xl p-6 text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-green-100">Blood Type</p>
              <p className="text-2xl font-bold">{patientData.bloodType}</p>
            </div>
            <Users className="h-8 w-8 text-green-200" />
          </div>
        </div>
      </div>

      {/* AI Predictions Section */}
      <div className="bg-white rounded-xl shadow-lg p-6">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-gray-800 flex items-center">
            <TrendingUp className="mr-2 h-5 w-5 text-purple-500" />
            AI-Predicted Available Donors
          </h3>
          <span className="bg-purple-100 text-purple-800 text-xs px-2 py-1 rounded-full">
            Next 7 days
          </span>
        </div>
        
        <div className="space-y-3">
          {predictedDonors.map((donor) => (
            <div key={donor.id} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
              <div>
                <p className="font-medium text-gray-800">{donor.name}</p>
                <p className="text-sm text-gray-600">Last donated: {new Date(donor.lastDonation).toLocaleDateString()}</p>
              </div>
              <div className="text-right">
                <div className="flex items-center">
                  <div className="w-16 bg-gray-200 rounded-full h-2 mr-2">
                    <div 
                      className="bg-green-500 h-2 rounded-full" 
                      style={{ width: `${donor.availabilityScore * 100}%` }}
                    ></div>
                  </div>
                  <span className="text-sm font-medium text-green-600">
                    {Math.round(donor.availabilityScore * 100)}%
                  </span>
                </div>
                <p className="text-xs text-gray-500">{donor.donationCount} donations</p>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Upcoming Schedule */}
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
          <Clock className="mr-2 h-5 w-5 text-blue-500" />
          Upcoming Schedule
        </h3>
        
        <div className="space-y-4">
          <div className="flex items-center p-4 bg-yellow-50 border-l-4 border-yellow-400 rounded">
            <Bell className="h-5 w-5 text-yellow-500 mr-3" />
            <div>
              <p className="font-medium text-gray-800">Blood Test Reminder</p>
              <p className="text-sm text-gray-600">Schedule your pre-transfusion tests - Due in 3 days</p>
            </div>
          </div>
          
          <div className="flex items-center p-4 bg-blue-50 border-l-4 border-blue-400 rounded">
            <Calendar className="h-5 w-5 text-blue-500 mr-3" />
            <div>
              <p className="font-medium text-gray-800">Doctor Consultation</p>
              <p className="text-sm text-gray-600">Dr. Rajesh Kumar - Aug 13, 10:00 AM</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const DonorDashboard = () => (
    <div className="space-y-6">
      {/* Donor Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-gradient-to-r from-green-500 to-green-600 rounded-xl p-6 text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-green-100">Total Donations</p>
              <p className="text-2xl font-bold">{donorData.totalDonations}</p>
            </div>
            <Heart className="h-8 w-8 text-green-200" />
          </div>
        </div>
        
        <div className="bg-gradient-to-r from-orange-500 to-orange-600 rounded-xl p-6 text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-orange-100">Streak Days</p>
              <p className="text-2xl font-bold">{donorData.streakDays}</p>
            </div>
            <Award className="h-8 w-8 text-orange-200" />
          </div>
        </div>
        
        <div className="bg-gradient-to-r from-purple-500 to-purple-600 rounded-xl p-6 text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-purple-100">Lives Saved</p>
              <p className="text-2xl font-bold">{donorData.totalDonations * 3}</p>
            </div>
            <Users className="h-8 w-8 text-purple-200" />
          </div>
        </div>
      </div>

      {/* Badges */}
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
          <Award className="mr-2 h-5 w-5 text-yellow-500" />
          Your Badges
        </h3>
        <div className="flex flex-wrap gap-3">
          {donorData.badges.map((badge, index) => (
            <span key={index} className="bg-gradient-to-r from-yellow-400 to-yellow-500 text-white px-4 py-2 rounded-full text-sm font-medium">
              üèÜ {badge}
            </span>
          ))}
        </div>
      </div>

      {/* Urgent Requests */}
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
          <Bell className="mr-2 h-5 w-5 text-red-500" />
          Urgent Blood Requests Near You
        </h3>
        
        <div className="space-y-4">
          {bloodRequests.filter(req => req.bloodType === donorData.bloodType).map((request) => (
            <div key={request.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
              <div className="flex justify-between items-start mb-2">
                <div>
                  <p className="font-medium text-gray-800">{request.patientName}</p>
                  <p className="text-sm text-gray-600 flex items-center">
                    <MapPin className="h-4 w-4 mr-1" />
                    {request.location}
                  </p>
                </div>
                <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                  request.urgency === 'high' ? 'bg-red-100 text-red-800' :
                  request.urgency === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                  'bg-green-100 text-green-800'
                }`}>
                  {request.urgency} priority
                </span>
              </div>
              
              <div className="flex justify-between items-center">
                <div className="text-sm text-gray-600">
                  <p>Blood Type: <span className="font-medium text-red-600">{request.bloodType}</span></p>
                  <p>Units needed: {request.unitsNeeded}</p>
                  <p>Required by: {new Date(request.requiredBy).toLocaleDateString()}</p>
                </div>
                <div className="space-x-2">
                  <button className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                    Accept
                  </button>
                  <button className="bg-gray-200 hover:bg-gray-300 text-gray-700 px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                    Share
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const RequestForm = () => {
    const [formData, setFormData] = useState({
      bloodType: '',
      unitsNeeded: 1,
      urgency: 'medium',
      requiredBy: '',
      location: patientData.location
    });

    const handleSubmit = () => {
      if (!formData.bloodType || !formData.requiredBy) {
        alert('Please fill in all required fields');
        return;
      }
      // Add to requests
      const newRequest = {
        id: bloodRequests.length + 1,
        patientName: patientData.name,
        ...formData
      };
      setBloodRequests([...bloodRequests, newRequest]);
      alert('Blood request submitted successfully!');
      setActiveTab('dashboard');
    };

    return (
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-lg font-semibold text-gray-800 mb-6">Create Blood Request</h3>
        
        <div className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Blood Type</label>
              <select 
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                value={formData.bloodType}
                onChange={(e) => setFormData({...formData, bloodType: e.target.value})}
                required
              >
                <option value="">Select Blood Type</option>
                <option value="A+">A+</option>
                <option value="A-">A-</option>
                <option value="B+">B+</option>
                <option value="B-">B-</option>
                <option value="AB+">AB+</option>
                <option value="AB-">AB-</option>
                <option value="O+">O+</option>
                <option value="O-">O-</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Units Needed</label>
              <input 
                type="number"
                min="1"
                max="10"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                value={formData.unitsNeeded}
                onChange={(e) => setFormData({...formData, unitsNeeded: parseInt(e.target.value)})}
                required
              />
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Urgency Level</label>
              <select 
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                value={formData.urgency}
                onChange={(e) => setFormData({...formData, urgency: e.target.value})}
              >
                <option value="low">Low</option>
                <option value="medium">Medium</option>
                <option value="high">High</option>
                <option value="critical">Critical</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Required By</label>
              <input 
                type="date"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                value={formData.requiredBy}
                onChange={(e) => setFormData({...formData, requiredBy: e.target.value})}
                required
              />
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Location</label>
            <input 
              type="text"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
              value={formData.location}
              onChange={(e) => setFormData({...formData, location: e.target.value})}
              required
            />
          </div>
          
          <button 
            onClick={handleSubmit}
            className="w-full bg-red-500 hover:bg-red-600 text-white font-medium py-3 px-4 rounded-lg transition-colors"
          >
            Submit Blood Request
          </button>
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-3">
              <Heart className="h-8 w-8 text-red-500" />
              <h1 className="text-2xl font-bold text-gray-900">Thalassemia Care</h1>
            </div>
            
            <div className="flex items-center space-x-4">
              {/* User Type Toggle */}
              <div className="flex bg-gray-100 rounded-lg p-1">
                <button
                  className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                    userType === 'patient' ? 'bg-white text-gray-900 shadow-sm' : 'text-gray-600'
                  }`}
                  onClick={() => setUserType('patient')}
                >
                  Patient
                </button>
                <button
                  className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                    userType === 'donor' ? 'bg-white text-gray-900 shadow-sm' : 'text-gray-600'
                  }`}
                  onClick={() => setUserType('donor')}
                >
                  Donor
                </button>
              </div>
              
              <div className="flex items-center space-x-2">
                <img 
                  className="h-8 w-8 rounded-full" 
                  src={`https://ui-avatars.com/api/?name=${userType === 'patient' ? patientData.name : donorData.name}&background=ef4444&color=fff`}
                  alt="Profile" 
                />
                <span className="text-sm font-medium text-gray-700">
                  {userType === 'patient' ? patientData.name : donorData.name}
                </span>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Navigation */}
      <nav className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex space-x-8">
            <button
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'dashboard' 
                  ? 'border-red-500 text-red-600' 
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
              onClick={() => setActiveTab('dashboard')}
            >
              Dashboard
            </button>
            
            {userType === 'patient' && (
              <button
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'request' 
                    ? 'border-red-500 text-red-600' 
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
                onClick={() => setActiveTab('request')}
              >
                Request Blood
              </button>
            )}
            
            <button
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'community' 
                  ? 'border-red-500 text-red-600' 
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
              onClick={() => setActiveTab('community')}
            >
              Community
            </button>
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {activeTab === 'dashboard' && (
          userType === 'patient' ? <PatientDashboard /> : <DonorDashboard />
        )}
        
        {activeTab === 'request' && userType === 'patient' && <RequestForm />}
        
        {activeTab === 'community' && (
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">Community Features</h3>
            <p className="text-gray-600">Community features coming soon - connect with other patients and donors, share experiences, and support each other.</p>
          </div>
        )}
      </main>
    </div>
  );
};

export default ThalassemiaCareApp;
